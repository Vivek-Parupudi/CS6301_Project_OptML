{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Keras SGD-Nesterov","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"E4N8IRNBaSOu","colab_type":"code","outputId":"9aaaf8aa-29fa-4a21-8871-3b33266f514d","executionInfo":{"status":"ok","timestamp":1588386139908,"user_tz":300,"elapsed":253,"user":{"displayName":"Che Ho Chan","photoUrl":"","userId":"13354232333533801012"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from __future__ import print_function\n","import keras\n","from keras.datasets import mnist\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Flatten\n","from keras.layers import Conv2D, MaxPooling2D\n","from keras import backend as K\n","from keras import optimizers\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"97IoNvMwaX8K","colab_type":"code","colab":{}},"source":["batch_size = 1\n","num_classes = 10\n","epochs = 10"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sAAChGa5abuy","colab_type":"code","colab":{}},"source":["# input image dimensions\n","img_rows, img_cols = 28, 28\n","\n","# the data, split between train and test sets\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","if K.image_data_format() == 'channels_first':\n","    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n","    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n","    input_shape = (1, img_rows, img_cols)\n","else:\n","    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n","    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n","    input_shape = (img_rows, img_cols, 1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9ttS31-kaeuE","colab_type":"code","outputId":"5ec70698-75d6-4979-80be-c412de7f8351","executionInfo":{"status":"ok","timestamp":1588386140418,"user_tz":300,"elapsed":734,"user":{"displayName":"Che Ho Chan","photoUrl":"","userId":"13354232333533801012"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["x_train = x_train[:6000].astype('float32')\n","x_test = x_test[:1500].astype('float32')\n","x_train /= 255\n","x_test /= 255\n","print('x_train shape:', x_train.shape)\n","print(x_train.shape[0], 'train samples')\n","print(x_test.shape[0], 'test samples')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["x_train shape: (6000, 28, 28, 1)\n","6000 train samples\n","1500 test samples\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XN99SWGQbECX","colab_type":"code","colab":{}},"source":["# convert class vectors to binary class matrices\n","y_train = keras.utils.to_categorical(y_train[:6000], num_classes)\n","y_test = keras.utils.to_categorical(y_test[:1500], num_classes)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KaVjpfE-bHhx","colab_type":"code","colab":{}},"source":["model = Sequential()\n","model.add(Conv2D(32, kernel_size=(3, 3),\n","                 input_shape=input_shape))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Dropout(0.25))\n","model.add(Flatten())\n","model.add(Dropout(0.5))\n","model.add(Dense(num_classes, activation='softmax'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"O8W9_ZJgbaWC","colab_type":"code","colab":{}},"source":["# Plug in your algo\n","# Reference:\n","# https://keras.io/optimizers/\n","opti = optimizers.SGD(lr=0.0001, momentum=0.9, nesterov=True, clipnorm=1.0)\n","model.compile(loss=keras.losses.categorical_crossentropy,\n","              optimizer=opti,\n","              metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VhS2xUwcsaUp","colab_type":"code","colab":{}},"source":["class LossHistory(keras.callbacks.Callback):\n","    def on_train_begin(self, logs={}):\n","        self.losses = []\n","\n","    def on_batch_end(self, batch, logs={}):\n","        self.losses.append(logs.get('loss'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mLsqUJzNss0Q","colab_type":"code","colab":{}},"source":["class AccuHistory(keras.callbacks.Callback):\n","    def on_train_begin(self, logs={}):\n","        self.accs = []\n","\n","    def on_batch_end(self, batch, logs={}):\n","        self.accs.append(logs.get('accuracy'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"L1jt1Opeyfw2","colab_type":"code","colab":{}},"source":["class Test_LossHistory(keras.callbacks.Callback):\n","    def on_test_begin(self, logs={}):\n","        self.losses=[]\n","\n","    def on_test_batch_end(self, batch, logs={}):\n","        self.losses.append(logs.get('loss'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QW6yCCTUygU-","colab_type":"code","colab":{}},"source":["class Test_AccuHistory(keras.callbacks.Callback):\n","    def on_test_begin(self, logs={}):\n","        self.accs=[]\n","\n","    def on_test_batch_end(self, batch, logs={}):\n","        self.accs.append(logs.get('accuracy'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"A3DfbF1GbdwM","colab_type":"code","outputId":"765fa7ca-c636-4926-b77e-efbc34b81d76","executionInfo":{"status":"ok","timestamp":1588386275210,"user_tz":300,"elapsed":135459,"user":{"displayName":"Che Ho Chan","photoUrl":"","userId":"13354232333533801012"}},"colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["lossHistory = LossHistory()\n","accuHistory = AccuHistory()\n","test_LossHistory = Test_LossHistory()\n","test_AccuHistory = Test_AccuHistory()\n","history = model.fit(x_train, y_train,\n","          batch_size=batch_size,\n","          epochs=epochs,\n","          verbose=1,\n","          callbacks=[lossHistory, accuHistory, test_LossHistory, test_AccuHistory],\n","          validation_data=(x_test, y_test))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 6000 samples, validate on 1500 samples\n","Epoch 1/10\n","6000/6000 [==============================] - 14s 2ms/step - loss: 2.1810 - accuracy: 0.2765 - val_loss: 2.0338 - val_accuracy: 0.5773\n","Epoch 2/10\n","6000/6000 [==============================] - 14s 2ms/step - loss: 1.8058 - accuracy: 0.5603 - val_loss: 1.6321 - val_accuracy: 0.6067\n","Epoch 3/10\n","6000/6000 [==============================] - 13s 2ms/step - loss: 1.3833 - accuracy: 0.6232 - val_loss: 1.2607 - val_accuracy: 0.6260\n","Epoch 4/10\n","6000/6000 [==============================] - 14s 2ms/step - loss: 1.0955 - accuracy: 0.6575 - val_loss: 1.0235 - val_accuracy: 0.6607\n","Epoch 5/10\n","6000/6000 [==============================] - 14s 2ms/step - loss: 0.9352 - accuracy: 0.6867 - val_loss: 0.8976 - val_accuracy: 0.6860\n","Epoch 6/10\n","6000/6000 [==============================] - 13s 2ms/step - loss: 0.8327 - accuracy: 0.7190 - val_loss: 0.8135 - val_accuracy: 0.7060\n","Epoch 7/10\n","6000/6000 [==============================] - 13s 2ms/step - loss: 0.7577 - accuracy: 0.7450 - val_loss: 0.7526 - val_accuracy: 0.7227\n","Epoch 8/10\n","6000/6000 [==============================] - 13s 2ms/step - loss: 0.7057 - accuracy: 0.7630 - val_loss: 0.7069 - val_accuracy: 0.7453\n","Epoch 9/10\n","6000/6000 [==============================] - 13s 2ms/step - loss: 0.6954 - accuracy: 0.7793 - val_loss: 0.6655 - val_accuracy: 0.7620\n","Epoch 10/10\n","6000/6000 [==============================] - 14s 2ms/step - loss: 0.6489 - accuracy: 0.7927 - val_loss: 0.6451 - val_accuracy: 0.7740\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ruM0I1rPbhPe","colab_type":"code","outputId":"87b225bd-0e41-435d-e615-e9f825e33927","executionInfo":{"status":"ok","timestamp":1588386275453,"user_tz":300,"elapsed":135693,"user":{"displayName":"Che Ho Chan","photoUrl":"","userId":"13354232333533801012"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["score = model.evaluate(x_test, y_test, verbose=0)\n","print('Test loss:', score[0])\n","print('Test accuracy:', score[1])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Test loss: 0.6450606949329376\n","Test accuracy: 0.7739999890327454\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JWq9xLcab620","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","import csv\n","\n","lossVals = lossHistory.losses\n","accuVals = accuHistory.accs\n","\n","with open('keras-sgd-nesterov-training-0001.csv', mode='w') as accu_loss:\n","    accu_loss_writer = csv.writer(accu_loss, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n","\n","    for accu, loss in zip(accuVals, lossVals):\n","      accu_loss_writer.writerow([accu, loss])\n","\n","test_lossVals = test_LossHistory.losses\n","test_accuVals = test_AccuHistory.accs\n","\n","with open('keras-sgd-nesterov-testing-0001.csv', mode='w') as accu_loss:\n","    accu_loss_writer = csv.writer(accu_loss, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n","\n","    for accu, loss in zip(test_accuVals, test_lossVals):\n","      accu_loss_writer.writerow([accu, loss])\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mqjsm-SRcOF8","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}